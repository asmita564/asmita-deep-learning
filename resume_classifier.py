# -*- coding: utf-8 -*-
"""Resume Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Enpky4NCiFUeMOt5EkFvQXIR5aqVs3wW
"""

# Import Libraries

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Activation

"""# Create CNN Model (CNN)"""

classifier = Sequential()

classifier.add(Conv2D(32, (3, 3), input_shape = (200, 200, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2, 2)))
classifier.add(Conv2D(32, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Conv2D(64, (3, 3), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))

classifier.add(Flatten())
classifier.add(Dense(units = 64, activation = 'relu'))
classifier.add(Dropout(0.5))

# output layer

classifier.add(Dense(1))
classifier.add(Activation('sigmoid'))

# Compile the Model

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,shear_range = 0.2,zoom_range = 0.2,horizontal_flip = True)
test_datagen = ImageDataGenerator(rescale = 1./255)

# Load the datasets

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/Train',
                                                 target_size = (200, 200),
                                                 batch_size = 8,
                                                 class_mode = "binary")

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Test',
                                            target_size = (200, 200),
                                            batch_size = 7,
                                            class_mode = "binary")

history = classifier.fit_generator(training_set,
                         steps_per_epoch = 8,
                         epochs = 10,
                         validation_data = test_set,
                         validation_steps = 3)

from keras.preprocessing import image
import numpy as np

# Image load

test_image = image.load_img('/content/drive/MyDrive/Test/resume/Resume 29.png', target_size = (200, 200))

# test_image.show()

test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)

# training_set.class_indices

if result[0][0] == 1:
    prediction = 'This is resume image'
else:
    prediction = 'This is not resume image'
print(prediction)

